@model Devir.DMS.Web.Models.Document.InstructionViewModel

@{
    Layout = null;
    var isForInstruction = (bool)ViewBag.isForInstruction;
}

    @using (Ajax.BeginForm(new AjaxOptions() { HttpMethod = "POST",  UpdateTargetId = "ModalInstructionResult"}))
   {
    
       @Html.Hidden("isForInstruction", isForInstruction)
    <div class="modal-header">
                
                <h3 id="addModalLabel">Создать поручение</h3>
          </div>
              <div class="modal-body" id="SignResultModalBody" style="width:550px"> 
    
                   <div>
                @Html.LabelFor(model => model.UserForWho)
                    
            </div>
            <div>
                 <div class="pdPicker">
                                <input type="hidden" value="@Model.UserForWho" id="UserForWho" name="UserForWho" />
                                <input type="text" value="" id="UserForWhoId" name="UserForWhoText" readonly="readonly" />
                </div>
                           @Html.ValidationMessageFor(model => model.UserForWho)
               @* @Html.EditorFor(model => model.UserForWho)*@

                
            </div>

            <div>
                @Html.LabelFor(model => model.DateBefore)
            </div>
            <div >
                <div class="editor-field">
                            <div class="input-append date" id="dp3" data-date="" data-date-format="dd.mm.yyyy">
                                @Html.TextBox("DateBefore", Model.maxDate < Model.DateBefore ? Model.maxDate.ToString("dd.MM.yyyy") : Model.DateBefore.ToString("dd.MM.yyyy"), new { @class = "span2" })
                                <span class="add-on"><i class="icon-th"></i></span>
                            </div>
                            @Html.ValidationMessageFor(model => model.DateBefore)
                        </div>  
            </div>

            <div>
                @Html.LabelFor(model => model.Header)
            </div>
            <div>
                @Html.TextAreaFor(model => model.Header, new { style = "width:535px" })
                @Html.ValidationMessageFor(model => model.Header)
            </div>
    
            @*<div >
                @Html.LabelFor(model => model.Body)
            </div>
            <div >
                @Html.TextAreaFor(model => model.Body, new { @class = "ckeditor" } )
                @Html.ValidationMessageFor(model => model.Body)
            </div>*@
    
           
     @* загрузка файла и сканирование *@
        <h4>Вложения:</h4>
        <div id="attachments_inModal" style="height: auto">

            @* сюда добавляется row-fluid при добавлении файла *@

            @if (Model.attachment != null)
            {
                foreach (var item in Model.attachment)
                {
                    Html.RenderAction("ShowUploadedFile", "File", new { guid = item });
                }
            }
        </div>
            
    
          @Html.HiddenFor(m=>m.DocumentId)
        @Html.HiddenFor(m=>m.RouteStageId)
        @Html.HiddenFor(m => m.RouteStageUserId)
                  @Html.HiddenFor(m => m.RootDocumentId)
                    </div>
        
        

         <div class="modal-footer">

             
        <div style="float: left">
              <button onclick="showModalInModal(); return false;" class="btn">Загрузить файл</button>
              <button onclick="getImageFromScaner(); return false;" class="btn">Сканировать картинку</button>
        </div>

                <button class="btn" data-dismiss="modal" aria-hidden="true">Закрыть</button>
                @*<button class="btn btn-primary" onclick="$('#AddSignResult').submit(); return false;">Поручить</button>*@
             <input type="submit" class="btn btn-primary submitter" onclick="$(this).hide();" value="Поручить" />
           
            </div>
    
    }

<script>

    //$(".ckeditor").ckeditor();

    InitPeopleByDepartmentPicker();
    //$('.date').addClass('hasDatepicker');
    $(".date").click(function () {
        if (!$(this).hasClass("hasDatepicker")) {
            $(this).datepicker({
                format: 'dd.mm.yyyy',
                onRender: function (date) {
                    
                    return date.valueOf() > new Date(@(Model.maxDate.Year), @(Model.maxDate.Month-1), @(Model.maxDate.Day)) ? 'disabled' : '';
                }
            }).on('changeDate', function () {
                $(this).datepicker("hide");
            });
            $(this).datepicker("show");
            $(this).addClass('hasDatepicker');
        }
    });

    //fixFormTarget();

</script>
